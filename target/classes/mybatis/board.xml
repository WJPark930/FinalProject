<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "https://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="community.model.Board">

	<!-- 게시판 목록 가져오기 -->
	<select id="getBoardList" resultType="community.model.BoardBean">
		SELECT b.bid, b.user_id, m.user_email, b.cate_id, b.created_at,
		b.updated_at, b.title, b.content, b.image, b.readcount, b.passwd
		FROM (
		SELECT rownum AS rank, bid, user_id, cate_id, created_at, updated_at,
		title,
		content, image, readcount, passwd
		FROM board
		<where>
			<choose>
				<when test="whatColumn == 'content'">
					WHERE content LIKE #{keyword}
				</when>
				<when test="whatColumn == 'title'">
					WHERE title LIKE #{keyword}
				</when>
				<when test="whatColumn == 'all'">
					WHERE title LIKE #{keyword}
					OR content LIKE #{keyword}
				</when>
				<otherwise>
					<!-- 검색 필터 없이 전체 검색 -->
				</otherwise>
			</choose>
		</where>
		ORDER BY created_at DESC
		) b
		INNER JOIN member m ON b.user_id = m.user_id
	</select>

	<select id="getArticleCount" resultType="int" parameterType="hashmap">
		SELECT count(*)
		FROM board
		<where>
			<if test="whatColumn != null and keyword != null and keyword != ''">
				<choose>
					<when test="whatColumn == 'content'">
						content LIKE #{keyword}
					</when>
					<when test="whatColumn == 'title'">
						title LIKE #{keyword}
					</when>
					<when test="whatColumn == 'all'">
						(title LIKE #{keyword} OR content LIKE #{keyword})
					</when>
				</choose>
			</if>
		</where>
	</select>

	<!-- 특정 게시물 가져오기 -->
	<select id="getArticle" resultType="community.model.BoardBean">
		SELECT b.bid, b.user_id, m.user_email, b.cate_id, b.created_at,
		b.updated_at, b.title, b.content, b.image, b.readcount, b.passwd
		FROM board b
		INNER JOIN member m ON b.user_id = m.user_id
		WHERE b.bid = #{num}
	</select>

	<!-- 조회수 상위 10개 게시물 가져오기(부등호 사용하려면 CDATA사용해야함) -->
	<select id="getTopReadCountBoards" resultType="community.model.BoardBean">
        <![CDATA[
        SELECT *
        FROM (
            SELECT b.bid, b.user_id, m.user_email, b.cate_id, b.created_at,
                   b.updated_at, b.title, b.content, b.image, b.readcount, b.passwd,
                   ROW_NUMBER() OVER (ORDER BY b.readcount DESC) AS rank
            FROM board b
            INNER JOIN member m ON b.user_id = m.user_id
        )
        WHERE rank <= 10
        ]]>
	</select>

	<!-- 조회수 업데이트 -->
	<update id="updateReadCount">
		UPDATE board
		SET readcount = readcount + 1
		WHERE bid = #{num}
	</update>

	<insert id="insertArticle" parameterType="int">
		insert into board (bid, user_id, cate_id, title, passwd, content,
		created_at, updated_at, readcount)
		values (board_seq.nextval, #{user_id}, #{cate_id}, #{title}, #{passwd},
		#{content,jdbcType=VARCHAR}, sysdate, sysdate, 0)
	</insert>

	<select id="getPasswd" resultType="java.lang.String" parameterType="int">
		select passwd from board where bid = #{bid}
	</select>

	<delete id="deleteArticle" parameterType="int">
		delete from board where bid = #{bid}
	</delete>

	<select id="getBoardUserId" resultType="int" parameterType="int">
		select user_id from board where bid = #{bid}
	</select>

	<update id="updateBoard" parameterType="int">
		update board set title=#{title}, content=#{content}, cate_id=#{cate_id},
		updated_at=sysdate where bid=#{bid}
	</update>

	<select id="getCategoryArticleCount" parameterType="map" resultType="int">
		SELECT count(*)
		FROM board
		WHERE cate_id = #{cate_id}
		<if test="whatColumn != null and keyword != null and keyword != ''">
			<choose>
				<when test="whatColumn == 'content'">
					AND content LIKE #{keyword}
				</when>
				<when test="whatColumn == 'title'">
					AND title LIKE #{keyword}
				</when>
				<when test="whatColumn == 'all'">
					AND (title LIKE #{keyword} OR content LIKE #{keyword})
				</when>
			</choose>
		</if>
	</select>

	<select id="getBoardsByCategoryWithMap" parameterType="hashmap" resultType="community.model.BoardBean">
		SELECT b.*, m.user_email
		FROM board b
		INNER JOIN member m ON b.user_id = m.user_id
		WHERE b.cate_id = #{cate_id}
		<trim prefix="AND" prefixOverrides="AND">
			<if test="whatColumn != null and keyword != null and keyword != ''">
				${whatColumn} LIKE #{keyword}
			</if>
		</trim>
		ORDER BY b.created_at DESC
	</select>

	<!-- 추천 여부 확인 쿼리 -->
	<select id="checkUserRecommend" resultType="int">
		SELECT COUNT(*)
		FROM board_recommend
		WHERE user_id = #{user_id} AND bid = #{bid}
	</select>

	<!-- 추천 삽입 쿼리 -->
	<insert id="insertRecommend">
		INSERT INTO board_recommend (id, user_id, bid)
		VALUES (comment_recommend_seq.nextval, #{user_id}, #{bid})
	</insert>

	<!-- 추천수 조회 쿼리 -->
	<select id="getRecommendCount" resultType="int">
		SELECT COUNT(*)
		FROM board_recommend
		WHERE bid = #{bid}
	</select>

</mapper>
